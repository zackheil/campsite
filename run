#!/usr/bin/env zsh

typeset -r UTILS_DIR="$(dirname $(readlink -f $0))/shell-utils"
typeset -r SCRIPT_DEBUG="true"
typeset -r PREV_CONTEXT_FILE="$HOME/.local/shell-context/campsite-installation-type"

# parse command line arguments
case "$1" in
    --minimal)
        typeset -gr FORCE_INSTALL_TYPE="minimal"
        ;;
    --comfortable)
        typeset -gr FORCE_INSTALL_TYPE="comfortable"
        ;;
    --full)
        typeset -gr FORCE_INSTALL_TYPE="full"
        ;;
    initial_run)
        typeset -gr INIT_FLAG="true"
        ;;
    "")
        ;;
    *)
        echo "Usage: $0 {--minimal|--comfortable|--full}"
        exit 1
        ;;
esac

# validate directory structure for campsite
source "$UTILS_DIR/action-runners"
check_campsite_dirs || exit 1

source "$UTILS_DIR/logger"

# If kicked-off with the init script, it is run with sudo. Keep that alive
if [ $INIT_FLAG ]; then
    log_dbg " 🏕️ " "Initial run detected. Running with sudo loop."
    sudo -v
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &
fi

# determine installation
typeset -x PREV_INSTALL_TYPE=$(cat $PREV_CONTEXT_FILE 2>/dev/null)

# If a previous installation is detected, and there is no override flag, just run existing installation again
if [[ -n $PREV_INSTALL_TYPE && -z $FORCE_INSTALL_TYPE ]]; then
    log_warn " 🏕️ " "Previous installation detected. Rerunning installation: $PREV_INSTALL_TYPE"
    log_warn " 🏕️ " "To override, run campsite with the installation you want (--minimal, --comfortable, --full)"
    log_warn " 🏕️ " "Note - this will not revert an existing higher-level installation"

# If a force is detected, run the installation with the forced type
elif [[ -n $FORCE_INSTALL_TYPE ]]; then
    log_warn " 🏕️ " "Forcing installation type: $FORCE_INSTALL_TYPE"
    log_warn " 🏕️ " "Note - this will not revert an existing higher-level installation"

# If the init script was used (no flag choices), and no previous installation is detected, prompt for installation type
elif [[ -z $PREV_INSTALL_TYPE && $INIT_FLAG ]]; then
    log_warn "No previous installation detected. Please choose an installation type:"
    log_warn " - minimal"
    log_warn " - comfortable"
    log_warn " - full"
    log_warn "Type the exact installation you would like."

    read -r INSTALL_PROMPT
    case $INSTALL_PROMPT in
        minimal)
            typeset -gr SHOULD_INSTALL="minimal"
            ;;
        comfortable)
            typeset -gr SHOULD_INSTALL="comfortable"
            ;;
        full)
            typeset -gr SHOULD_INSTALL="full"
            ;;
        *)
            log_err " 🏕️ " "Invalid installation type. Exiting."
            exit 1
            ;;
    esac
    
else 
    log_err " 🏕️ " "error - how did you get here?"
    exit 1
fi

typeset -r INSTALLATION_TYPE=${SHOULD_INSTALL:-${FORCE_INSTALL_TYPE:-$PREV_INSTALL_TYPE}}

log_dbg " 🏕️ " "Saving $INSTALLATION_TYPE back to context file"
echo $INSTALLATION_TYPE > $PREV_CONTEXT_FILE

log_dbg " 🏕️ " "Running installation for $INSTALLATION_TYPE"

run_installation $INSTALLATION_TYPE || {
    log_err " 🏕️ " "Installation failed. Exiting."
    exit 1
}